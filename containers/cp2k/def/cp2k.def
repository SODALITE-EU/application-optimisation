Bootstrap: docker
From: nvidia/cuda:10.2-devel

%help
    This is the container used to test the MODAK tuner component 
    for the SODALITE project (https://www.sodalite.eu/).

%labels
    Author HPE EMEA Research Lab
    Version v0.1.0

%setup
    # take external configuration
    CONFDIR=${SINGULARITY_ROOTFS}/usr/local/workdir/config
    mkdir -p ${CONFDIR}
    CONFFILE=cp2k_conf.sh
    if test -f ${CONFFILE}; then
        cp ${CONFFILE} ${CONFDIR}
    else
        # Default configuration
        cat > ${CONFDIR}/${CONFFILE} <<EOF
        export MPI_DIST="MPICH"
EOF
    fi

%files
    # Copy C program to check MPI rank
    mpirank.c /usr/local/workdir

%environment
    #
    # Read configuration
    #
    . /usr/local/workdir/config/cp2k_conf.sh

    export LC_ALL="en_US.UTF-8"
    export PYTHONNOUSERSITE=1
    export PYTHONIOENCODING=utf8

    export OPENBLAS_NUM_THREADS=1 # doesn't work with multiple threads
    export OPENBLAS_MAIN_FREE=1 # Used to avoid Python crash

    export LD_LIBRARY_PATH=/usr/local/lib

    export CP2K_ROOT=/usr/local/workdir/cp2k
    export CP2K_DATA_DIR=${CP2K_ROOT}/data

%runscript
    if test $# -eq 0 || test -z "$@" ; then
        # Open a shell
        echo "Provide a cp2k input! Opening a shell for the moment..."
        bash -norc
    else
        export CP2K_LOG=${ASTER_LOG:-"cp2k.out"}
        export CP2K_INPUT=${ASTER_INPUT:-""}
	export OMP_NUM_THREADS=${OMP_NUM_THREADS:-1}

	/usr/local/workdir/cp2k/exe/local_cuda-sm60/cp2k.psmp -i $CP2K_INPUT -o ${CP2K_LOG}
    fi

%post -c /bin/bash -e
    #
    # First install default packages and clean caches
    #
    export DEBIAN_FRONTEND=noninteractive
    apt-get update && apt-get -y upgrade --no-install-recommends
    apt-get -y install --no-install-recommends \
                       build-essential wget less gfortran procps \
		       libopenblas-dev locales ca-certificates \
		       python3 python3-dev python3-numpy vim ssh git \
		       zlib1g-dev file xterm tk bison flex
    apt-get clean && rm -rf /var/lib/apt/lists/* # do not forget to clean!

    echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen && locale-gen
    export LANG=en_US.UTF-8

    #
    # Move inside build directory
    #
    cd /usr/local/workdir

    #
    # Read configuration
    #
    . config/cp2k_conf.sh

    #
    # Install MPICH
    #
    if test "$MPI_DIST" = "MPICH"; then
	export MPICH_VERSION=3.3.2
	echo "Install MPICH v"$MPICH_VERSION
	wget -q http://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz
	tar xf mpich-${MPICH_VERSION}.tar.gz && rm mpich-${MPICH_VERSION}.tar.gz
	cd mpich-${MPICH_VERSION}
	./configure --prefix=/usr/local/workdir/mpi --disable-static --disable-rpath --disable-wrapper-rpath \
                    --mandir=/usr/share/man --enable-fast=all,O3
	make -j$(getconf _NPROCESSORS_ONLN) install
	cd .. && rm -rf mpich-${MPICH_VERSION}
    #
    # Install OpenMPI
    #
    elif test "$MPI_DIST" = "OpenMPI"; then
	export OMPI_VERSION=4.1.1
	echo "Install OpenMPI v"$OMPI_VERSION
	wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-$OMPI_VERSION.tar.bz2
	tar xf openmpi-$OMPI_VERSION.tar.bz2 && rm openmpi-$OMPI_VERSION.tar.bz2
	cd openmpi-$OMPI_VERSION
	./configure --prefix=/usr/local/workdir/mpi --disable-static --disable-wrapper-runpath --disable-rpath \
                    --mandir=/usr/share/man --enable-fast=all,O3 \
		    --enable-mpi1-compatibility
	make -j$(getconf _NPROCESSORS_ONLN) install
	cd .. && rm -rf openmpi-$OMPI_VERSION
	export OMPI_ALLOW_RUN_AS_ROOT=1
	export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
    fi
    echo 'export PATH=/usr/local/workdir/mpi/bin:$PATH' >> $SINGULARITY_ENVIRONMENT
    echo 'export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/workdir/mpi/lib' >> $SINGULARITY_ENVIRONMENT
    . $SINGULARITY_ENVIRONMENT

    #
    # Compile program to get MPI rank (simple check)
    #
    mkdir -p /usr/local/workdir/bin
    mpicc /usr/local/workdir/mpirank.c -o /usr/local/workdir/bin/mpirank

    # Install latest cmake
    export CMAKE_VERSION=3.22.1
    wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.sh
    sh cmake-${CMAKE_VERSION}-Linux-x86_64.sh --prefix=/usr/local --skip-license
    rm -f cmake-${CMAKE_VERSION}-Linux-x86_64.sh

    # Install SCALAPACK (BLACS included)
    scalapack_ver=2.1.0
    wget https://www.cp2k.org/static/downloads/scalapack-${scalapack_ver}.tgz
    tar xf scalapack-${scalapack_ver}.tgz --no-same-owner && rm scalapack-${scalapack_ver}.tgz
    cd scalapack-${scalapack_ver}
    mkdir build && cd build
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_C_COMPILER=mpicc -DCMAKE_Fortran_COMPILER=mpif90 -DCMAKE_BUILD_TYPE=Release ..
    make -j$(getconf _NPROCESSORS_ONLN) install
    cd ../../ && rm -rf scalapack-${scalapack_ver}
    ln -s /usr/local/lib/libscalapack.so /usr/local/lib/libblacs.so

    # FFTW
    fftw_ver="3.3.10"
    wget https://www.cp2k.org/static/downloads/fftw-${fftw_ver}.tar.gz
    tar xf fftw-${fftw_ver}.tar.gz && rm -rf fftw-${fftw_ver}.tar.gz
    cd fftw-${fftw_ver}
    ./configure --prefix=/usr/local --enable-openmp --disable-shared --enable-static --enable-mpi
    make -j$(getconf _NPROCESSORS_ONLN) install
    cd .. && rm -rf fftw-${fftw_ver}

    # Libint
    LMAX=5
    wget https://github.com/cp2k/libint-cp2k/releases/download/v2.6.0/libint-v2.6.0-cp2k-lmax-${LMAX}.tgz
    tar xf libint-v2.6.0-cp2k-lmax-${LMAX}.tgz && rm libint-v2.6.0-cp2k-lmax-${LMAX}.tgz
    cd libint-v2.6.0-cp2k-lmax-${LMAX}
    ./configure --prefix=/usr/local --with-cxx="g++ -O2 -Wno-error" --with-cxx-optflags="-O2 -Wno-error" --enable-fortran
    make -j$(getconf _NPROCESSORS_ONLN) install
    cd .. && rm -rf libint-v2.6.0-cp2k-lmax-${LMAX}

    # LIBXC
    libxc_ver=5.1.7
    wget https://www.cp2k.org/static/downloads/libxc-${libxc_ver}.tar.gz
    tar xf libxc-${libxc_ver}.tar.gz && rm libxc-${libxc_ver}.tar.gz
    cd libxc-${libxc_ver}
    ./configure --prefix=/usr/local
    make -j$(getconf _NPROCESSORS_ONLN) install
    cd .. && rm -rf libxc-${libxc_ver}

    # CP2K
    cd /usr/local/workdir
    git clone --recursive https://github.com/cp2k/cp2k.git
    cd cp2k
    cat << 'EOF' > arch/local_cuda-sm60.psmp
CC          = gcc
CXX         = g++
AR          = ar -r
FC          = mpif90
LD          = mpif90
#
DFLAGS      = -D__GRID_CUDA -D__parallel -D__FFTW3 -D__LIBINT -D__LIBXC -D__SCALAPACK
#-D__COSMA
#
FCDEBFLAGS  = -fbacktrace -ffree-form -fimplicit-none -std=f2008
CFLAGS      = -fno-omit-frame-pointer -fopenmp -O3 -funroll-loops $(DFLAGS) -I/usr/local/cuda/include
FCFLAGS     = -fno-omit-frame-pointer -fopenmp -O3 -funroll-loops $(DFLAGS) $(FCDEBFLAGS) -I/usr/local/include
CXXFLAGS    = -O2 -fPIC -fno-omit-frame-pointer --std=c++11 $(DFLAGS)
LDFLAGS     =  $(FCFLAGS)
LIBS        = -L/usr/local/cuda/lib64 -lscalapack -ldl -lpthread -lxcf03 -lxc -lint2 -lfftw3_mpi -lfftw3 -lfftw3_omp -lmpifort -lmpicxx -lmpi -lopenblas -lstdc++ -lstdc++ -lcudart -lnvrtc -lcuda -lcublas -lrt
OFFLOAD_CC    = nvcc
OFFLOAD_FLAGS = -g -arch sm_60 -O3 -Xcompiler='-fopenmp' --std=c++11  $(DFLAGS) 
OFFLOAD_TARGET = cuda
EOF
     make -j$(getconf _NPROCESSORS_ONLN) ARCH=local_cuda-sm60 VERSION=psmp
